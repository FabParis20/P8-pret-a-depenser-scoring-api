"""
Dashboard de monitoring - API Scoring Cr√©dit
Projet MLOps - Pr√™t √† d√©penser
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from pathlib import Path
from evidently import Report
from evidently.metrics import *
from evidently.presets import *
import numpy as np

# Configuration de la page
st.set_page_config(
    page_title="Monitoring API Scoring",
    page_icon="üìä",
    layout="wide"
)

# Titre principal
st.title("üìä Dashboard de Monitoring - API Scoring Cr√©dit")
st.markdown("---")

# Chemin vers le fichier de logs
LOGS_FILE = Path("data/prod/logs_production.csv")

# Fonction pour charger les donn√©es
@st.cache_data
def load_data():
    """
    Charge les donn√©es de logs de production
    
    Returns:
        pd.DataFrame: Donn√©es des pr√©dictions
    """
    if LOGS_FILE.exists():
        df = pd.read_csv(LOGS_FILE)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        return df
    else:
        return None

def generate_drift_report(df_production):
    """
    G√©n√®re un rapport de drift entre r√©f√©rence et production
    
    Args:
        df_production: DataFrame des logs de production
        
    Returns:
        tuple: (rapport Evidently, chemin HTML)
    """
    # Cr√©er un dataset de r√©f√©rence simul√© (m√™me logique que le notebook)
    np.random.seed(42)
    scores_reference = []
    
    for _ in range(100):
        if np.random.random() < 0.85:
            score = np.random.uniform(0.70, 0.95)
        else:
            score = np.random.uniform(0.10, 0.69)
        scores_reference.append(score)
    
    reference_data = pd.DataFrame({'score': scores_reference})
    current_data = df_production[['score']].copy()
    
    # G√©n√©rer le rapport
    report = Report([DataDriftPreset()])
    my_eval = report.run(current_data=current_data, reference_data=reference_data)
    
    # Sauvegarder le rapport HTML temporaire
    html_path = Path("drift_report_temp.html")
    my_eval.save_html(str(html_path))
    
    return my_eval, html_path

# Charger les donn√©es
df = load_data()

# V√©rifier que les donn√©es existent
if df is None or df.empty:
    st.error("‚ùå Aucune donn√©e de production disponible.")
    st.info("üí° Lancez l'API et effectuez quelques pr√©dictions pour g√©n√©rer des donn√©es.")
    st.stop()

# ============================================================
# PAGE 1 : VUE D'ENSEMBLE
# ============================================================

st.header("üìà Vue d'ensemble")

# Calcul des m√©triques
total_predictions = len(df)
nb_acceptes = len(df[df['decision'] == 'Cr√©dit accept√©'])
nb_refuses = len(df[df['decision'] == 'Cr√©dit refus√©'])
taux_acceptation = (nb_acceptes / total_predictions) * 100
score_moyen = df['score'].mean()
temps_reponse_moyen = df['response_time_ms'].mean()

# Affichage des KPIs en colonnes
col1, col2, col3 = st.columns(3)

with col1:
    st.metric(
        label="üìä Total de pr√©dictions",
        value=f"{total_predictions}"
    )
    st.metric(
        label="‚è±Ô∏è Temps de r√©ponse moyen",
        value=f"{temps_reponse_moyen:.2f} ms"
    )

with col2:
    st.metric(
        label="‚úÖ Cr√©dits accept√©s",
        value=f"{nb_acceptes}",
        delta=f"{taux_acceptation:.1f}%"
    )
    st.metric(
        label="üìâ Score moyen",
        value=f"{score_moyen:.2f}"
    )

with col3:
    st.metric(
        label="‚ùå Cr√©dits refus√©s",
        value=f"{nb_refuses}",
        delta=f"{100-taux_acceptation:.1f}%"
    )

st.markdown("---")

# ============================================================
# PAGE 2 : DISTRIBUTION DES SCORES
# ============================================================

st.header("üìä Distribution des scores")

# Cr√©er deux colonnes pour les graphiques
col1, col2 = st.columns(2)

with col1:
    # Histogramme des scores
    st.subheader("Distribution des scores de pr√©diction")
    
    fig_hist = px.histogram(
        df,
        x='score',
        nbins=20,
        title="R√©partition des scores",
        labels={'score': 'Score de pr√©diction', 'count': 'Nombre de pr√©dictions'},
        color_discrete_sequence=['#1f77b4']
    )
    
    fig_hist.update_layout(
        showlegend=False,
        height=400
    )
    
    st.plotly_chart(fig_hist, use_container_width=True)

with col2:
    # Graphique en camembert (pie chart) des d√©cisions
    st.subheader("R√©partition des d√©cisions")
    
    decisions_count = df['decision'].value_counts()
    
    fig_pie = px.pie(
        values=decisions_count.values,
        names=decisions_count.index,
        title="Acceptation vs Refus",
        color_discrete_sequence=['#2ecc71', '#e74c3c']
    )
    
    fig_pie

# ============================================================
# INFORMATIONS
# ============================================================

st.header("‚ÑπÔ∏è Informations")

# Afficher un √©chantillon des derni√®res pr√©dictions
st.subheader("Derni√®res pr√©dictions (10 plus r√©centes)")

derni√®res_predictions = df.sort_values('timestamp', ascending=False).head(10)

st.dataframe(
    derni√®res_predictions[['timestamp', 'client_id', 'score', 'decision', 'response_time_ms']],
    use_container_width=True,
    hide_index=True
)

# ============================================================
# PAGE 3 : ANALYSE DU DATA DRIFT
# ============================================================

st.header("üî¨ Analyse du Data Drift")

st.info("üí° Cette section compare la distribution des scores de production avec une p√©riode de r√©f√©rence.")

# G√©n√©rer le rapport de drift
with st.spinner("G√©n√©ration du rapport Evidently..."):
    drift_eval, html_path = generate_drift_report(df)

# M√©triques de drift
col1, col2, col3 = st.columns(3)

with col1:
    st.metric(
        label="üìä Colonnes analys√©es",
        value="1",
        help="Nombre de variables analys√©es (score)"
    )

with col2:
    st.metric(
        label="‚ö†Ô∏è Drift d√©tect√©",
        value="Oui" if html_path.exists() else "Non",
        help="Pr√©sence de drift statistiquement significatif"
    )

with col3:
    # Calculer les stats de diff√©rence
    ref_mean = 0.80  # Approximation de la r√©f√©rence simul√©e
    prod_mean = df['score'].mean()
    diff_pct = ((prod_mean - ref_mean) / ref_mean) * 100
    
    st.metric(
        label="üìà √âcart de moyenne",
        value=f"{prod_mean:.2f}",
        delta=f"{diff_pct:.1f}%",
        help="Moyenne des scores : production vs r√©f√©rence"
    )

# Afficher le rapport HTML Evidently dans un iframe
st.subheader("üìÑ Rapport Evidently complet")

if html_path.exists():
    with open(html_path, 'r', encoding='utf-8') as f:
        html_content = f.read()
    
    # Afficher dans un iframe
    st.components.v1.html(html_content, height=800, scrolling=True)
else:
    st.warning("‚ö†Ô∏è Le rapport de drift n'a pas pu √™tre g√©n√©r√©.")

st.markdown("---")


# ============================================================
# PAGE 4 : PERFORMANCE DE L'API
# ============================================================

st.header("‚ö° Performance de l'API")

# Statistiques de temps de r√©ponse
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric(
        label="‚è±Ô∏è Temps moyen",
        value=f"{df['response_time_ms'].mean():.2f} ms"
    )

with col2:
    st.metric(
        label="‚ö° Temps min",
        value=f"{df['response_time_ms'].min():.2f} ms"
    )

with col3:
    st.metric(
        label="üêå Temps max",
        value=f"{df['response_time_ms'].max():.2f} ms"
    )

with col4:
    st.metric(
        label="üìä √âcart-type",
        value=f"{df['response_time_ms'].std():.2f} ms"
    )

# Graphique d'√©volution du temps de r√©ponse
st.subheader("üìà √âvolution du temps de r√©ponse")

fig_perf = px.line(
    df.sort_values('timestamp'),
    x='timestamp',
    y='response_time_ms',
    title="Temps de r√©ponse par pr√©diction",
    labels={'timestamp': 'Date/Heure', 'response_time_ms': 'Temps (ms)'}
)

fig_perf.add_hline(
    y=df['response_time_ms'].mean(),
    line_dash="dash",
    line_color="red",
    annotation_text="Moyenne"
)

fig_perf.update_layout(height=400)
st.plotly_chart(fig_perf, use_container_width=True)

# Distribution des temps de r√©ponse
st.subheader("üìä Distribution des temps de r√©ponse")

fig_dist = px.histogram(
    df,
    x='response_time_ms',
    nbins=30,
    title="R√©partition des temps de r√©ponse",
    labels={'response_time_ms': 'Temps de r√©ponse (ms)', 'count': 'Nombre de pr√©dictions'}
)

fig_dist.update_layout(height=400)
st.plotly_chart(fig_dist, use_container_width=True)

st.markdown("---")

# Footer
st.caption("üìä Dashboard de monitoring - Version Dummy | Pr√™t √† d√©penser")