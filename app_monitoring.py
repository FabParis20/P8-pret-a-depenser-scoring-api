"""
Dashboard de monitoring - API Scoring Cr√©dit
Projet MLOps - Pr√™t √† d√©penser
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from pathlib import Path

# Configuration de la page
st.set_page_config(
    page_title="Monitoring API Scoring",
    page_icon="üìä",
    layout="wide"
)

# Titre principal
st.title("üìä Dashboard de Monitoring - API Scoring Cr√©dit")
st.markdown("---")

# Chemin vers le fichier de logs
LOGS_FILE = Path("data/prod/logs_production.csv")

# Fonction pour charger les donn√©es
@st.cache_data
def load_data():
    """
    Charge les donn√©es de logs de production
    
    Returns:
        pd.DataFrame: Donn√©es des pr√©dictions
    """
    if LOGS_FILE.exists():
        df = pd.read_csv(LOGS_FILE)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        return df
    else:
        return None

# Charger les donn√©es
df = load_data()

# V√©rifier que les donn√©es existent
if df is None or df.empty:
    st.error("‚ùå Aucune donn√©e de production disponible.")
    st.info("üí° Lancez l'API et effectuez quelques pr√©dictions pour g√©n√©rer des donn√©es.")
    st.stop()

# ============================================================
# PAGE 1 : VUE D'ENSEMBLE
# ============================================================

st.header("üìà Vue d'ensemble")

# Calcul des m√©triques
total_predictions = len(df)
nb_acceptes = len(df[df['decision'] == 'Cr√©dit accept√©'])
nb_refuses = len(df[df['decision'] == 'Cr√©dit refus√©'])
taux_acceptation = (nb_acceptes / total_predictions) * 100
score_moyen = df['score'].mean()
temps_reponse_moyen = df['response_time_ms'].mean()

# Affichage des KPIs en colonnes
col1, col2, col3 = st.columns(3)

with col1:
    st.metric(
        label="üìä Total de pr√©dictions",
        value=f"{total_predictions}"
    )
    st.metric(
        label="‚è±Ô∏è Temps de r√©ponse moyen",
        value=f"{temps_reponse_moyen:.2f} ms"
    )

with col2:
    st.metric(
        label="‚úÖ Cr√©dits accept√©s",
        value=f"{nb_acceptes}",
        delta=f"{taux_acceptation:.1f}%"
    )
    st.metric(
        label="üìâ Score moyen",
        value=f"{score_moyen:.2f}"
    )

with col3:
    st.metric(
        label="‚ùå Cr√©dits refus√©s",
        value=f"{nb_refuses}",
        delta=f"{100-taux_acceptation:.1f}%"
    )

st.markdown("---")

# ============================================================
# PAGE 2 : DISTRIBUTION DES SCORES
# ============================================================

st.header("üìä Distribution des scores")

# Cr√©er deux colonnes pour les graphiques
col1, col2 = st.columns(2)

with col1:
    # Histogramme des scores
    st.subheader("Distribution des scores de pr√©diction")
    
    fig_hist = px.histogram(
        df,
        x='score',
        nbins=20,
        title="R√©partition des scores",
        labels={'score': 'Score de pr√©diction', 'count': 'Nombre de pr√©dictions'},
        color_discrete_sequence=['#1f77b4']
    )
    
    fig_hist.update_layout(
        showlegend=False,
        height=400
    )
    
    st.plotly_chart(fig_hist, use_container_width=True)

with col2:
    # Graphique en camembert (pie chart) des d√©cisions
    st.subheader("R√©partition des d√©cisions")
    
    decisions_count = df['decision'].value_counts()
    
    fig_pie = px.pie(
        values=decisions_count.values,
        names=decisions_count.index,
        title="Acceptation vs Refus",
        color_discrete_sequence=['#2ecc71', '#e74c3c']
    )
    
    fig_pie

# ============================================================
# INFORMATIONS
# ============================================================

st.header("‚ÑπÔ∏è Informations")

# Afficher un √©chantillon des derni√®res pr√©dictions
st.subheader("Derni√®res pr√©dictions (10 plus r√©centes)")

derni√®res_predictions = df.sort_values('timestamp', ascending=False).head(10)

st.dataframe(
    derni√®res_predictions[['timestamp', 'client_id', 'score', 'decision', 'response_time_ms']],
    use_container_width=True,
    hide_index=True
)
